#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { app, server } = require("../app");
const io = require("../io");
const debug = require("debug")("file-share:server");
const http = require("http");
const path = require("path");
const fs = require("fs");
const { promises: fsPromise } = require("fs");
const { localIp } = require("../handlers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create a files directory if not exist
 */

let filesPath = path.resolve(__dirname, "..", "files");
fsPromise
  .open(filesPath, "r")
  .then(async (descp) => {
    await descp.close();
  })
  .catch(async (err) => {
    if (err.code == "ENOENT") {
      return await fsPromise.mkdir(filesPath);
    }
    throw err;
  })
  .catch(console.error);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, async () => {
  console.log("Server has started");
  console.log(`> \tlocalhost:${port}`);
  console.log(`> \t${await localIp()}:${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
